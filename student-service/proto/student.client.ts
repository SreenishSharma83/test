// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "student.proto" (package "student", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { StudentService } from "./student";
import type { StudentList } from "./student";
import type { Empty } from "./student";
import type { DeleteResponse } from "./student";
import type { GetStudentRequest } from "./student";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { Student } from "./student";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * Service definition
 *
 * @generated from protobuf service student.StudentService
 */
export interface IStudentServiceClient {
    /**
     * @generated from protobuf rpc: CreateStudent(student.Student) returns (student.Student);
     */
    createStudent(input: Student, options?: RpcOptions): UnaryCall<Student, Student>;
    /**
     * @generated from protobuf rpc: GetStudentById(student.GetStudentRequest) returns (student.Student);
     */
    getStudentById(input: GetStudentRequest, options?: RpcOptions): UnaryCall<GetStudentRequest, Student>;
    /**
     * @generated from protobuf rpc: UpdateStudent(student.Student) returns (student.Student);
     */
    updateStudent(input: Student, options?: RpcOptions): UnaryCall<Student, Student>;
    /**
     * @generated from protobuf rpc: DeleteStudent(student.GetStudentRequest) returns (student.DeleteResponse);
     */
    deleteStudent(input: GetStudentRequest, options?: RpcOptions): UnaryCall<GetStudentRequest, DeleteResponse>;
    /**
     * @generated from protobuf rpc: ListStudents(student.Empty) returns (student.StudentList);
     */
    listStudents(input: Empty, options?: RpcOptions): UnaryCall<Empty, StudentList>;
}
/**
 * Service definition
 *
 * @generated from protobuf service student.StudentService
 */
export class StudentServiceClient implements IStudentServiceClient, ServiceInfo {
    typeName = StudentService.typeName;
    methods = StudentService.methods;
    options = StudentService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: CreateStudent(student.Student) returns (student.Student);
     */
    createStudent(input: Student, options?: RpcOptions): UnaryCall<Student, Student> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<Student, Student>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetStudentById(student.GetStudentRequest) returns (student.Student);
     */
    getStudentById(input: GetStudentRequest, options?: RpcOptions): UnaryCall<GetStudentRequest, Student> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetStudentRequest, Student>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdateStudent(student.Student) returns (student.Student);
     */
    updateStudent(input: Student, options?: RpcOptions): UnaryCall<Student, Student> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<Student, Student>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DeleteStudent(student.GetStudentRequest) returns (student.DeleteResponse);
     */
    deleteStudent(input: GetStudentRequest, options?: RpcOptions): UnaryCall<GetStudentRequest, DeleteResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetStudentRequest, DeleteResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ListStudents(student.Empty) returns (student.StudentList);
     */
    listStudents(input: Empty, options?: RpcOptions): UnaryCall<Empty, StudentList> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<Empty, StudentList>("unary", this._transport, method, opt, input);
    }
}
