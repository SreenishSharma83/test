// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.3
// source: student.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "student";

/** Student message format */
export interface Student {
  id: string;
  name: string;
  age: number;
  email: string;
}

/** Requests and responses */
export interface GetStudentRequest {
  id: string;
}

export interface DeleteResponse {
  success: boolean;
}

export interface StudentList {
  students: Student[];
}

export interface Empty {
}

function createBaseStudent(): Student {
  return { id: "", name: "", age: 0, email: "" };
}

export const Student: MessageFns<Student> = {
  encode(message: Student, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.age !== 0) {
      writer.uint32(24).int32(message.age);
    }
    if (message.email !== "") {
      writer.uint32(34).string(message.email);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Student {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStudent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.age = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.email = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Student {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      age: isSet(object.age) ? globalThis.Number(object.age) : 0,
      email: isSet(object.email) ? globalThis.String(object.email) : "",
    };
  },

  toJSON(message: Student): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.age !== 0) {
      obj.age = Math.round(message.age);
    }
    if (message.email !== "") {
      obj.email = message.email;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Student>, I>>(base?: I): Student {
    return Student.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Student>, I>>(object: I): Student {
    const message = createBaseStudent();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.age = object.age ?? 0;
    message.email = object.email ?? "";
    return message;
  },
};

function createBaseGetStudentRequest(): GetStudentRequest {
  return { id: "" };
}

export const GetStudentRequest: MessageFns<GetStudentRequest> = {
  encode(message: GetStudentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetStudentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetStudentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetStudentRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: GetStudentRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetStudentRequest>, I>>(base?: I): GetStudentRequest {
    return GetStudentRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetStudentRequest>, I>>(object: I): GetStudentRequest {
    const message = createBaseGetStudentRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseDeleteResponse(): DeleteResponse {
  return { success: false };
}

export const DeleteResponse: MessageFns<DeleteResponse> = {
  encode(message: DeleteResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteResponse {
    return { success: isSet(object.success) ? globalThis.Boolean(object.success) : false };
  },

  toJSON(message: DeleteResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteResponse>, I>>(base?: I): DeleteResponse {
    return DeleteResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteResponse>, I>>(object: I): DeleteResponse {
    const message = createBaseDeleteResponse();
    message.success = object.success ?? false;
    return message;
  },
};

function createBaseStudentList(): StudentList {
  return { students: [] };
}

export const StudentList: MessageFns<StudentList> = {
  encode(message: StudentList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.students) {
      Student.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StudentList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStudentList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.students.push(Student.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StudentList {
    return {
      students: globalThis.Array.isArray(object?.students) ? object.students.map((e: any) => Student.fromJSON(e)) : [],
    };
  },

  toJSON(message: StudentList): unknown {
    const obj: any = {};
    if (message.students?.length) {
      obj.students = message.students.map((e) => Student.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StudentList>, I>>(base?: I): StudentList {
    return StudentList.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StudentList>, I>>(object: I): StudentList {
    const message = createBaseStudentList();
    message.students = object.students?.map((e) => Student.fromPartial(e)) || [];
    return message;
  },
};

function createBaseEmpty(): Empty {
  return {};
}

export const Empty: MessageFns<Empty> = {
  encode(_: Empty, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Empty {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEmpty();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Empty {
    return {};
  },

  toJSON(_: Empty): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<Empty>, I>>(base?: I): Empty {
    return Empty.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Empty>, I>>(_: I): Empty {
    const message = createBaseEmpty();
    return message;
  },
};

/** Service definition */
export interface StudentService {
  CreateStudent(request: Student): Promise<Student>;
  GetStudentById(request: GetStudentRequest): Promise<Student>;
  UpdateStudent(request: Student): Promise<Student>;
  DeleteStudent(request: GetStudentRequest): Promise<DeleteResponse>;
  ListStudents(request: Empty): Promise<StudentList>;
}

export const StudentServiceServiceName = "student.StudentService";
export class StudentServiceClientImpl implements StudentService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || StudentServiceServiceName;
    this.rpc = rpc;
    this.CreateStudent = this.CreateStudent.bind(this);
    this.GetStudentById = this.GetStudentById.bind(this);
    this.UpdateStudent = this.UpdateStudent.bind(this);
    this.DeleteStudent = this.DeleteStudent.bind(this);
    this.ListStudents = this.ListStudents.bind(this);
  }
  CreateStudent(request: Student): Promise<Student> {
    const data = Student.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreateStudent", data);
    return promise.then((data) => Student.decode(new BinaryReader(data)));
  }

  GetStudentById(request: GetStudentRequest): Promise<Student> {
    const data = GetStudentRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetStudentById", data);
    return promise.then((data) => Student.decode(new BinaryReader(data)));
  }

  UpdateStudent(request: Student): Promise<Student> {
    const data = Student.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateStudent", data);
    return promise.then((data) => Student.decode(new BinaryReader(data)));
  }

  DeleteStudent(request: GetStudentRequest): Promise<DeleteResponse> {
    const data = GetStudentRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "DeleteStudent", data);
    return promise.then((data) => DeleteResponse.decode(new BinaryReader(data)));
  }

  ListStudents(request: Empty): Promise<StudentList> {
    const data = Empty.encode(request).finish();
    const promise = this.rpc.request(this.service, "ListStudents", data);
    return promise.then((data) => StudentList.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
